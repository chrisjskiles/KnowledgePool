// <auto-generated />
using System;
using KnowledgePool.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KnowledgePool.Migrations
{
    [DbContext(typeof(AllPrintingsContext))]
    [Migration("20231101171213_NonNullableReleaseDate")]
    partial class NonNullableReleaseDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("KnowledgePool.Models.Card", b =>
                {
                    b.Property<string>("Uuid")
                        .HasColumnType("VARCHAR(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("Artist")
                        .HasColumnType("TEXT")
                        .HasColumnName("artist");

                    b.Property<string>("ArtistIds")
                        .HasColumnType("TEXT")
                        .HasColumnName("artistIds");

                    b.Property<string>("AsciiName")
                        .HasColumnType("TEXT")
                        .HasColumnName("asciiName");

                    b.Property<string>("AttractionLights")
                        .HasColumnType("TEXT")
                        .HasColumnName("attractionLights");

                    b.Property<string>("Availability")
                        .HasColumnType("TEXT")
                        .HasColumnName("availability");

                    b.Property<string>("BoosterTypes")
                        .HasColumnType("TEXT")
                        .HasColumnName("boosterTypes");

                    b.Property<string>("BorderColor")
                        .HasColumnType("TEXT")
                        .HasColumnName("borderColor");

                    b.Property<string>("CardParts")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardParts");

                    b.Property<string>("ColorIdentity")
                        .HasColumnType("TEXT")
                        .HasColumnName("colorIdentity");

                    b.Property<string>("ColorIndicator")
                        .HasColumnType("TEXT")
                        .HasColumnName("colorIndicator");

                    b.Property<string>("Colors")
                        .HasColumnType("TEXT")
                        .HasColumnName("colors");

                    b.Property<string>("Defense")
                        .HasColumnType("TEXT")
                        .HasColumnName("defense");

                    b.Property<string>("DuelDeck")
                        .HasColumnType("TEXT")
                        .HasColumnName("duelDeck");

                    b.Property<long?>("EdhrecRank")
                        .HasColumnType("INTEGER")
                        .HasColumnName("edhrecRank");

                    b.Property<double?>("EdhrecSaltiness")
                        .HasColumnType("FLOAT")
                        .HasColumnName("edhrecSaltiness");

                    b.Property<double?>("FaceConvertedManaCost")
                        .HasColumnType("FLOAT")
                        .HasColumnName("faceConvertedManaCost");

                    b.Property<string>("FaceFlavorName")
                        .HasColumnType("TEXT")
                        .HasColumnName("faceFlavorName");

                    b.Property<double?>("FaceManaValue")
                        .HasColumnType("FLOAT")
                        .HasColumnName("faceManaValue");

                    b.Property<string>("FaceName")
                        .HasColumnType("TEXT")
                        .HasColumnName("faceName");

                    b.Property<string>("Finishes")
                        .HasColumnType("TEXT")
                        .HasColumnName("finishes");

                    b.Property<string>("FlavorName")
                        .HasColumnType("TEXT")
                        .HasColumnName("flavorName");

                    b.Property<string>("FlavorText")
                        .HasColumnType("TEXT")
                        .HasColumnName("flavorText");

                    b.Property<string>("FrameEffects")
                        .HasColumnType("TEXT")
                        .HasColumnName("frameEffects");

                    b.Property<string>("FrameVersion")
                        .HasColumnType("TEXT")
                        .HasColumnName("frameVersion");

                    b.Property<string>("Hand")
                        .HasColumnType("TEXT")
                        .HasColumnName("hand");

                    b.Property<byte[]>("HasAlternativeDeckLimit")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("hasAlternativeDeckLimit");

                    b.Property<byte[]>("HasContentWarning")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("hasContentWarning");

                    b.Property<byte[]>("HasFoil")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("hasFoil");

                    b.Property<byte[]>("HasNonFoil")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("hasNonFoil");

                    b.Property<byte[]>("IsAlternative")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isAlternative");

                    b.Property<byte[]>("IsFullArt")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isFullArt");

                    b.Property<byte[]>("IsFunny")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isFunny");

                    b.Property<byte[]>("IsOnlineOnly")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isOnlineOnly");

                    b.Property<byte[]>("IsOversized")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isOversized");

                    b.Property<byte[]>("IsPromo")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isPromo");

                    b.Property<byte[]>("IsRebalanced")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isRebalanced");

                    b.Property<byte[]>("IsReprint")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isReprint");

                    b.Property<byte[]>("IsReserved")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isReserved");

                    b.Property<byte[]>("IsStarter")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isStarter");

                    b.Property<byte[]>("IsStorySpotlight")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isStorySpotlight");

                    b.Property<byte[]>("IsTextless")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isTextless");

                    b.Property<byte[]>("IsTimeshifted")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isTimeshifted");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT")
                        .HasColumnName("keywords");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<string>("Layout")
                        .HasColumnType("TEXT")
                        .HasColumnName("layout");

                    b.Property<string>("LeadershipSkills")
                        .HasColumnType("TEXT")
                        .HasColumnName("leadershipSkills");

                    b.Property<string>("Life")
                        .HasColumnType("TEXT")
                        .HasColumnName("life");

                    b.Property<string>("Loyalty")
                        .HasColumnType("TEXT")
                        .HasColumnName("loyalty");

                    b.Property<string>("ManaCost")
                        .HasColumnType("TEXT")
                        .HasColumnName("manaCost");

                    b.Property<double?>("ManaValue")
                        .HasColumnType("FLOAT")
                        .HasColumnName("manaValue");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT")
                        .HasColumnName("number");

                    b.Property<string>("OriginalPrintings")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalPrintings");

                    b.Property<string>("OriginalReleaseDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalReleaseDate");

                    b.Property<string>("OriginalText")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalText");

                    b.Property<string>("OriginalType")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalType");

                    b.Property<string>("OtherFaceIds")
                        .HasColumnType("TEXT")
                        .HasColumnName("otherFaceIds");

                    b.Property<string>("Power")
                        .HasColumnType("TEXT")
                        .HasColumnName("power");

                    b.Property<string>("Printings")
                        .HasColumnType("TEXT")
                        .HasColumnName("printings");

                    b.Property<string>("PromoTypes")
                        .HasColumnType("TEXT")
                        .HasColumnName("promoTypes");

                    b.Property<string>("Rarity")
                        .HasColumnType("TEXT")
                        .HasColumnName("rarity");

                    b.Property<string>("RebalancedPrintings")
                        .HasColumnType("TEXT")
                        .HasColumnName("rebalancedPrintings");

                    b.Property<string>("RelatedCards")
                        .HasColumnType("TEXT")
                        .HasColumnName("relatedCards");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("securityStamp");

                    b.Property<string>("SetCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("setCode");

                    b.Property<string>("Side")
                        .HasColumnType("TEXT")
                        .HasColumnName("side");

                    b.Property<string>("Signature")
                        .HasColumnType("TEXT")
                        .HasColumnName("signature");

                    b.Property<string>("SourceProducts")
                        .HasColumnType("TEXT")
                        .HasColumnName("sourceProducts");

                    b.Property<string>("Subsets")
                        .HasColumnType("TEXT")
                        .HasColumnName("subsets");

                    b.Property<string>("Subtypes")
                        .HasColumnType("TEXT")
                        .HasColumnName("subtypes");

                    b.Property<string>("Supertypes")
                        .HasColumnType("TEXT")
                        .HasColumnName("supertypes");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<string>("Toughness")
                        .HasColumnType("TEXT")
                        .HasColumnName("toughness");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<string>("Types")
                        .HasColumnType("TEXT")
                        .HasColumnName("types");

                    b.Property<string>("Variations")
                        .HasColumnType("TEXT")
                        .HasColumnName("variations");

                    b.Property<string>("Watermark")
                        .HasColumnType("TEXT")
                        .HasColumnName("watermark");

                    b.HasKey("Uuid");

                    b.HasIndex(new[] { "Uuid" }, "cards_uuid");

                    b.ToTable("cards", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.CardForeignDatum", b =>
                {
                    b.Property<string>("FaceName")
                        .HasColumnType("TEXT")
                        .HasColumnName("faceName");

                    b.Property<string>("FlavorText")
                        .HasColumnType("TEXT")
                        .HasColumnName("flavorText");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<long?>("MultiverseId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("multiverseId");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<string>("Uuid")
                        .HasColumnType("TEXT")
                        .HasColumnName("uuid");

                    b.HasIndex(new[] { "Uuid" }, "cardForeignData_uuid");

                    b.ToTable("cardForeignData", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.CardIdentifier", b =>
                {
                    b.Property<string>("CardKingdomEtchedId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardKingdomEtchedId");

                    b.Property<string>("CardKingdomFoilId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardKingdomFoilId");

                    b.Property<string>("CardKingdomId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardKingdomId");

                    b.Property<string>("CardsphereId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardsphereId");

                    b.Property<string>("McmId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mcmId");

                    b.Property<string>("McmMetaId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mcmMetaId");

                    b.Property<string>("MtgArenaId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgArenaId");

                    b.Property<string>("MtgjsonFoilVersionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgjsonFoilVersionId");

                    b.Property<string>("MtgjsonNonFoilVersionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgjsonNonFoilVersionId");

                    b.Property<string>("MtgjsonV4id")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgjsonV4Id");

                    b.Property<string>("MtgoFoilId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgoFoilId");

                    b.Property<string>("MtgoId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgoId");

                    b.Property<string>("MultiverseId")
                        .HasColumnType("TEXT")
                        .HasColumnName("multiverseId");

                    b.Property<string>("ScryfallId")
                        .HasColumnType("TEXT")
                        .HasColumnName("scryfallId");

                    b.Property<string>("ScryfallIllustrationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("scryfallIllustrationId");

                    b.Property<string>("ScryfallOracleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("scryfallOracleId");

                    b.Property<string>("TcgplayerEtchedProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tcgplayerEtchedProductId");

                    b.Property<string>("TcgplayerProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tcgplayerProductId");

                    b.Property<string>("Uuid")
                        .HasColumnType("TEXT")
                        .HasColumnName("uuid");

                    b.HasIndex(new[] { "Uuid" }, "cardIdentifiers_uuid");

                    b.ToTable("cardIdentifiers", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.CardLegality", b =>
                {
                    b.Property<string>("Alchemy")
                        .HasColumnType("TEXT")
                        .HasColumnName("alchemy");

                    b.Property<string>("Brawl")
                        .HasColumnType("TEXT")
                        .HasColumnName("brawl");

                    b.Property<string>("Commander")
                        .HasColumnType("TEXT")
                        .HasColumnName("commander");

                    b.Property<string>("Duel")
                        .HasColumnType("TEXT")
                        .HasColumnName("duel");

                    b.Property<string>("Explorer")
                        .HasColumnType("TEXT")
                        .HasColumnName("explorer");

                    b.Property<string>("Future")
                        .HasColumnType("TEXT")
                        .HasColumnName("future");

                    b.Property<string>("Gladiator")
                        .HasColumnType("TEXT")
                        .HasColumnName("gladiator");

                    b.Property<string>("Historic")
                        .HasColumnType("TEXT")
                        .HasColumnName("historic");

                    b.Property<string>("Historicbrawl")
                        .HasColumnType("TEXT")
                        .HasColumnName("historicbrawl");

                    b.Property<string>("Legacy")
                        .HasColumnType("TEXT")
                        .HasColumnName("legacy");

                    b.Property<string>("Modern")
                        .HasColumnType("TEXT")
                        .HasColumnName("modern");

                    b.Property<string>("Oathbreaker")
                        .HasColumnType("TEXT")
                        .HasColumnName("oathbreaker");

                    b.Property<string>("Oldschool")
                        .HasColumnType("TEXT")
                        .HasColumnName("oldschool");

                    b.Property<string>("Pauper")
                        .HasColumnType("TEXT")
                        .HasColumnName("pauper");

                    b.Property<string>("Paupercommander")
                        .HasColumnType("TEXT")
                        .HasColumnName("paupercommander");

                    b.Property<string>("Penny")
                        .HasColumnType("TEXT")
                        .HasColumnName("penny");

                    b.Property<string>("Pioneer")
                        .HasColumnType("TEXT")
                        .HasColumnName("pioneer");

                    b.Property<string>("Predh")
                        .HasColumnType("TEXT")
                        .HasColumnName("predh");

                    b.Property<string>("Premodern")
                        .HasColumnType("TEXT")
                        .HasColumnName("premodern");

                    b.Property<string>("Standard")
                        .HasColumnType("TEXT")
                        .HasColumnName("standard");

                    b.Property<string>("Uuid")
                        .HasColumnType("TEXT")
                        .HasColumnName("uuid");

                    b.Property<string>("Vintage")
                        .HasColumnType("TEXT")
                        .HasColumnName("vintage");

                    b.HasIndex(new[] { "Uuid" }, "cardLegalities_uuid");

                    b.ToTable("cardLegalities", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.CardPurchaseUrl", b =>
                {
                    b.Property<string>("CardKingdom")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardKingdom");

                    b.Property<string>("CardKingdomEtched")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardKingdomEtched");

                    b.Property<string>("CardKingdomFoil")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardKingdomFoil");

                    b.Property<string>("Cardmarket")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardmarket");

                    b.Property<string>("Tcgplayer")
                        .HasColumnType("TEXT")
                        .HasColumnName("tcgplayer");

                    b.Property<string>("TcgplayerEtched")
                        .HasColumnType("TEXT")
                        .HasColumnName("tcgplayerEtched");

                    b.Property<string>("Uuid")
                        .HasColumnType("TEXT")
                        .HasColumnName("uuid");

                    b.HasIndex(new[] { "Uuid" }, "cardPurchaseUrls_uuid");

                    b.ToTable("cardPurchaseUrls", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.CardRuling", b =>
                {
                    b.Property<byte[]>("Date")
                        .HasColumnType("DATE")
                        .HasColumnName("date");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)")
                        .HasColumnName("uuid");

                    b.HasIndex(new[] { "Uuid" }, "cardRulings_uuid");

                    b.ToTable("cardRulings", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.Metum", b =>
                {
                    b.Property<byte[]>("Date")
                        .HasColumnType("DATE")
                        .HasColumnName("date");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT")
                        .HasColumnName("version");

                    b.ToTable("meta", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.Set", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(8)")
                        .HasColumnName("code");

                    b.Property<long?>("BaseSetSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("baseSetSize");

                    b.Property<string>("Block")
                        .HasColumnType("TEXT")
                        .HasColumnName("block");

                    b.Property<long?>("CardsphereSetId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cardsphereSetId");

                    b.Property<byte[]>("IsFoilOnly")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isFoilOnly");

                    b.Property<byte[]>("IsForeignOnly")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isForeignOnly");

                    b.Property<byte[]>("IsNonFoilOnly")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isNonFoilOnly");

                    b.Property<byte[]>("IsOnlineOnly")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isOnlineOnly");

                    b.Property<byte[]>("IsPartialPreview")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isPartialPreview");

                    b.Property<string>("KeyruneCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("keyruneCode");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT")
                        .HasColumnName("languages");

                    b.Property<long?>("McmId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mcmId");

                    b.Property<long?>("McmIdExtras")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mcmIdExtras");

                    b.Property<string>("McmName")
                        .HasColumnType("TEXT")
                        .HasColumnName("mcmName");

                    b.Property<string>("MtgoCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgoCode");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("ParentCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("parentCode");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("releaseDate");

                    b.Property<long?>("TcgplayerGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tcgplayerGroupId");

                    b.Property<string>("TokenSetCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("tokenSetCode");

                    b.Property<long?>("TotalSetSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("totalSetSize");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Code");

                    b.ToTable("sets", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.SetBoosterContent", b =>
                {
                    b.Property<long?>("BoosterIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("boosterIndex");

                    b.Property<string>("BoosterName")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("boosterName");

                    b.Property<string>("SetCode")
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("setCode");

                    b.Property<string>("SheetName")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("sheetName");

                    b.Property<long?>("SheetPicks")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sheetPicks");

                    b.HasIndex(new[] { "SetCode", "SheetName", "BoosterName", "BoosterIndex" }, "IX_setBoosterContents_setCode_sheetName_boosterName_boosterIndex")
                        .IsUnique();

                    b.ToTable("setBoosterContents", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.SetBoosterContentWeight", b =>
                {
                    b.Property<long?>("BoosterIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("boosterIndex");

                    b.Property<string>("BoosterName")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("boosterName");

                    b.Property<long?>("BoosterWeight")
                        .HasColumnType("INTEGER")
                        .HasColumnName("boosterWeight");

                    b.Property<string>("SetCode")
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("setCode");

                    b.ToTable("setBoosterContentWeights", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.SetBoosterSheet", b =>
                {
                    b.Property<string>("BoosterName")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("boosterName");

                    b.Property<string>("SetCode")
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("setCode");

                    b.Property<byte[]>("SheetHasBalanceColors")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("sheetHasBalanceColors");

                    b.Property<byte[]>("SheetIsFoil")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("sheetIsFoil");

                    b.Property<string>("SheetName")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("sheetName");

                    b.HasIndex(new[] { "SetCode", "SheetName", "BoosterName" }, "IX_setBoosterSheets_setCode_sheetName_boosterName")
                        .IsUnique();

                    b.ToTable("setBoosterSheets", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.SetBoosterSheetCard", b =>
                {
                    b.Property<string>("BoosterName")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("boosterName");

                    b.Property<string>("CardUuid")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)")
                        .HasColumnName("cardUuid");

                    b.Property<long?>("CardWeight")
                        .HasColumnType("BIGINT")
                        .HasColumnName("cardWeight");

                    b.Property<string>("SetCode")
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("setCode");

                    b.Property<string>("SheetName")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("sheetName");

                    b.HasIndex(new[] { "SetCode", "SheetName", "BoosterName", "CardUuid" }, "IX_setBoosterSheetCards_setCode_sheetName_boosterName_cardUuid")
                        .IsUnique();

                    b.ToTable("setBoosterSheetCards", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.SetTranslation", b =>
                {
                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<string>("Translation")
                        .HasColumnType("TEXT")
                        .HasColumnName("translation");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)")
                        .HasColumnName("uuid");

                    b.HasIndex(new[] { "Uuid" }, "setTranslations_uuid");

                    b.ToTable("setTranslations", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.Token", b =>
                {
                    b.Property<string>("Artist")
                        .HasColumnType("TEXT")
                        .HasColumnName("artist");

                    b.Property<string>("ArtistIds")
                        .HasColumnType("TEXT")
                        .HasColumnName("artistIds");

                    b.Property<string>("AsciiName")
                        .HasColumnType("TEXT")
                        .HasColumnName("asciiName");

                    b.Property<string>("Availability")
                        .HasColumnType("TEXT")
                        .HasColumnName("availability");

                    b.Property<string>("BoosterTypes")
                        .HasColumnType("TEXT")
                        .HasColumnName("boosterTypes");

                    b.Property<string>("BorderColor")
                        .HasColumnType("TEXT")
                        .HasColumnName("borderColor");

                    b.Property<string>("ColorIdentity")
                        .HasColumnType("TEXT")
                        .HasColumnName("colorIdentity");

                    b.Property<string>("Colors")
                        .HasColumnType("TEXT")
                        .HasColumnName("colors");

                    b.Property<double?>("EdhrecSaltiness")
                        .HasColumnType("FLOAT")
                        .HasColumnName("edhrecSaltiness");

                    b.Property<string>("FaceName")
                        .HasColumnType("TEXT")
                        .HasColumnName("faceName");

                    b.Property<string>("Finishes")
                        .HasColumnType("TEXT")
                        .HasColumnName("finishes");

                    b.Property<string>("FlavorText")
                        .HasColumnType("TEXT")
                        .HasColumnName("flavorText");

                    b.Property<string>("FrameEffects")
                        .HasColumnType("TEXT")
                        .HasColumnName("frameEffects");

                    b.Property<string>("FrameVersion")
                        .HasColumnType("TEXT")
                        .HasColumnName("frameVersion");

                    b.Property<byte[]>("HasFoil")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("hasFoil");

                    b.Property<byte[]>("HasNonFoil")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("hasNonFoil");

                    b.Property<byte[]>("IsFullArt")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isFullArt");

                    b.Property<byte[]>("IsFunny")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isFunny");

                    b.Property<byte[]>("IsPromo")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isPromo");

                    b.Property<byte[]>("IsReprint")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isReprint");

                    b.Property<byte[]>("IsTextless")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("isTextless");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT")
                        .HasColumnName("keywords");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<string>("Layout")
                        .HasColumnType("TEXT")
                        .HasColumnName("layout");

                    b.Property<string>("ManaCost")
                        .HasColumnType("TEXT")
                        .HasColumnName("manaCost");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT")
                        .HasColumnName("number");

                    b.Property<string>("Orientation")
                        .HasColumnType("TEXT")
                        .HasColumnName("orientation");

                    b.Property<string>("OriginalText")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalText");

                    b.Property<string>("OriginalType")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalType");

                    b.Property<string>("OtherFaceIds")
                        .HasColumnType("TEXT")
                        .HasColumnName("otherFaceIds");

                    b.Property<string>("Power")
                        .HasColumnType("TEXT")
                        .HasColumnName("power");

                    b.Property<string>("PromoTypes")
                        .HasColumnType("TEXT")
                        .HasColumnName("promoTypes");

                    b.Property<string>("RelatedCards")
                        .HasColumnType("TEXT")
                        .HasColumnName("relatedCards");

                    b.Property<string>("ReverseRelated")
                        .HasColumnType("TEXT")
                        .HasColumnName("reverseRelated");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("securityStamp");

                    b.Property<string>("SetCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("setCode");

                    b.Property<string>("Side")
                        .HasColumnType("TEXT")
                        .HasColumnName("side");

                    b.Property<string>("Signature")
                        .HasColumnType("TEXT")
                        .HasColumnName("signature");

                    b.Property<string>("Subtypes")
                        .HasColumnType("TEXT")
                        .HasColumnName("subtypes");

                    b.Property<string>("Supertypes")
                        .HasColumnType("TEXT")
                        .HasColumnName("supertypes");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<string>("Toughness")
                        .HasColumnType("TEXT")
                        .HasColumnName("toughness");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<string>("Types")
                        .HasColumnType("TEXT")
                        .HasColumnName("types");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("Watermark")
                        .HasColumnType("TEXT")
                        .HasColumnName("watermark");

                    b.HasIndex(new[] { "Uuid" }, "tokens_uuid");

                    b.ToTable("tokens", (string)null);
                });

            modelBuilder.Entity("KnowledgePool.Models.TokenIdentifier", b =>
                {
                    b.Property<string>("CardKingdomEtchedId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardKingdomEtchedId");

                    b.Property<string>("CardKingdomFoilId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardKingdomFoilId");

                    b.Property<string>("CardKingdomId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardKingdomId");

                    b.Property<string>("CardsphereId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cardsphereId");

                    b.Property<string>("McmId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mcmId");

                    b.Property<string>("McmMetaId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mcmMetaId");

                    b.Property<string>("MtgArenaId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgArenaId");

                    b.Property<string>("MtgjsonFoilVersionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgjsonFoilVersionId");

                    b.Property<string>("MtgjsonNonFoilVersionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgjsonNonFoilVersionId");

                    b.Property<string>("MtgjsonV4id")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgjsonV4Id");

                    b.Property<string>("MtgoFoilId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgoFoilId");

                    b.Property<string>("MtgoId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mtgoId");

                    b.Property<string>("MultiverseId")
                        .HasColumnType("TEXT")
                        .HasColumnName("multiverseId");

                    b.Property<string>("ScryfallId")
                        .HasColumnType("TEXT")
                        .HasColumnName("scryfallId");

                    b.Property<string>("ScryfallIllustrationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("scryfallIllustrationId");

                    b.Property<string>("ScryfallOracleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("scryfallOracleId");

                    b.Property<string>("TcgplayerEtchedProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tcgplayerEtchedProductId");

                    b.Property<string>("TcgplayerProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tcgplayerProductId");

                    b.Property<string>("Uuid")
                        .HasColumnType("TEXT")
                        .HasColumnName("uuid");

                    b.HasIndex(new[] { "Uuid" }, "tokenIdentifiers_uuid");

                    b.ToTable("tokenIdentifiers", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
