@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@model IEnumerable<KnowledgePool.Models.Card>

@using System.Linq
@using System.Text.Json

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    ViewBag.Title = "Data Viewer";
}

@{
    var powerData = ViewData["PowerData"] as Dictionary<string, string>;
    var toughnessData = ViewData["ToughnessData"] as Dictionary<string, string>;
    var scatterData = ViewData["ScatterData"] as Dictionary<string, string>;
}

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            @foreach (var d in powerData)
            {
                <text>
                    const powerDataChart_@d.Key = document.getElementById('@d.Key-powerData');
                    const powerChartJson_@d.Key = JSON.parse('@Html.Raw(d.Value)');
                    window['powerChart_@d.Key'] = new Chart(powerDataChart_@d.Key, powerChartJson_@d.Key);
                </text>
            }

            @foreach (var d in toughnessData)
            {
                <text>
                    const toughnessDataChart_@d.Key = document.getElementById('@d.Key-toughnessData');
                    const toughnessChartJson_@d.Key = JSON.parse('@Html.Raw(d.Value)');
                    window['toughnessChart_@d.Key'] = new Chart(toughnessDataChart_@d.Key, toughnessChartJson_@d.Key);
                </text>
            }

            @foreach (var d in scatterData)
            {
                <text>
                    const scatterDataChart_@d.Key = document.getElementById('@d.Key-scatterData');
                    const scatterChartJson_@d.Key = JSON.parse('@Html.Raw(d.Value)');
                    window['scatterChart_@d.Key'] = new Chart(scatterDataChart_@d.Key, scatterChartJson_@d.Key);
                </text>
            }

            //not functional, supposed to change min bubble size
            // scatterPlot.options.plugins.beforeDraw = chart => {
            //     chart.getDatasetMeta(0).data.forEach(v => {
            //         v.options.radius *= 5;
            //         v.options.hoverRadius = v.options.radius;
            //     });
            // }
            //
            //scatterPlot.update();

            loadSearchFromStorage();
        });

        //toggles visible datasets
        function toggleData(elem) {
            const length = elem.id.length
            const index = parseInt(elem.id[length - 1]);

            const hyphenIndex = elem.id.indexOf('-');
            const setCode = elem.id.substring(0, hyphenIndex);

            var plot;

            if (elem.id[length - 2] === "p") plot = window['powerChart_' + setCode];
            else if (elem.id[length - 2] === "t") plot = window['toughnessChart_' + setCode];
            else if (elem.id[length - 2] === "s") plot = window['scatterChart_' + setCode];

            const currentVisibility = plot.data.datasets[index].hidden;

            plot.data.datasets[index].hidden = !currentVisibility;
            plot.update();
        }

        //creates a button to display which sets are selected
        function addSearch(setInput) {
            const opts = Array.from(document.getElementById("setList").children);

            const searchedSets = document.getElementById('searchedSets');
            const existingButtons = Array.from(searchedSets.children, ({ textContent }) => textContent);

            if (!existingButtons.includes(setInput)) {
                opts.forEach((opt) => {
                    if (opt.value == setInput) {
                        const setButton = document.createElement('button');
                        setButton.innerText = setInput;
                        setButton.setAttribute('id', opt.textContent);
                        setButton.classList.add('set-button');
                        //setButton.setAttribute('name', 'sets');

                        const hiddenInput = document.createElement('input');
                        hiddenInput.setAttribute('value', opt.textContent);
                        hiddenInput.setAttribute('name', 'setIds')
                        hiddenInput.style = 'display:none';

                        setButton.addEventListener('click', function () {
                            searchedSets.removeChild(setButton);
                            saveSearchToStorage();
                        });

                        searchedSets.appendChild(setButton);
                        searchedSets.appendChild(hiddenInput);
                        saveSearchToStorage();
                    }
                });
            }

            document.getElementById('set').value = '';    
        }

        //save all searched terms to session storage
        function saveSearchToStorage() {
            const setButtons = document.querySelectorAll('.set-button');
            const sets = Array.from(setButtons).map(button => button.innerText);

            sessionStorage.setItem('searchSets', JSON.stringify(sets));
            console.log(sessionStorage.getItem('searchSets'));
        }

        //load all searched sets and create buttons
        function loadSearchFromStorage() {
            const storedSets = sessionStorage.getItem('searchSets');

            if (storedSets) {
                const sets = JSON.parse(storedSets);
                sets.forEach(set => addSearch(set));
            }

            console.log(storedSets);
        }
    </script>
}

<h2>Set Search</h2>
<p>
    @using (Html.BeginForm("Index", "DataViewer", FormMethod.Get))
    {
        <p>
            <label for="setList">Type the set name: </label>
            <input list="setList" id="set" oninput="addSearch(this.value)"/>
            <datalist id="setList" name="setList">
                @foreach (SelectListItem sli in ViewBag.setList)
                {
                    <option value=@sli.Text>@sli.Value</option>
                }
            </datalist>
            <br>

            <input type="radio" name="dataType" value="Average" checked="checked" /> Average
            <input type="radio" name="dataType" value="Median" /> Median
            <br>

            <input type="checkbox" name="singleChart" value="true"/> Display data on single chart 

            
            <div id="searchedSets">
                <!--sets will be added here as searched-->
            </div>
            <br>

            <input type="submit" value="Submit">
        </p>
    }
</p>

@foreach (var d in powerData)
{
    <canvas id="@d.Key-powerData"></canvas>
    <div>
        <a id="@d.Key-p0" class="chart-action" onclick="toggleData(this)">Toggle White</a>
        <a id="@d.Key-p1" class="chart-action" onclick="toggleData(this)">Toggle Blue</a>
        <a id="@d.Key-p2" class="chart-action" onclick="toggleData(this)">Toggle Black</a>
        <a id="@d.Key-p3" class="chart-action" onclick="toggleData(this)">Toggle Red</a>
        <a id="@d.Key-p4" class="chart-action" onclick="toggleData(this)">Toggle Green</a>
        <a id="@d.Key-p5" class="chart-action" onclick="toggleData(this)">Toggle Gold</a>
        <a id="@d.Key-p6" class="chart-action" onclick="toggleData(this)">Toggle Colorless</a>
        <a id="@d.Key-p7" class="chart-action" onclick="toggleData(this)">Toggle Overall</a>
    </div>
}

@foreach (var d in toughnessData)
{
    <canvas id="@d.Key-toughnessData"></canvas>
    <div>
        <a id="@d.Key-t0" class="chart-action" onclick="toggleData(this)">Toggle White</a>
        <a id="@d.Key-t1" class="chart-action" onclick="toggleData(this)">Toggle Blue</a>
        <a id="@d.Key-t2" class="chart-action" onclick="toggleData(this)">Toggle Black</a>
        <a id="@d.Key-t3" class="chart-action" onclick="toggleData(this)">Toggle Red</a>
        <a id="@d.Key-t4" class="chart-action" onclick="toggleData(this)">Toggle Green</a>
        <a id="@d.Key-t5" class="chart-action" onclick="toggleData(this)">Toggle Gold</a>
        <a id="@d.Key-t6" class="chart-action" onclick="toggleData(this)">Toggle Colorless</a>
        <a id="@d.Key-t7" class="chart-action" onclick="toggleData(this)">Toggle Overall</a>
    </div>
}

@foreach (var d in scatterData)
{
    <canvas id="@d.Key-scatterData"></canvas>
    <div>
        <a id="@d.Key-s0" class="chart-action" onclick="toggleData(this)">Toggle White</a>
        <a id="@d.Key-s1" class="chart-action" onclick="toggleData(this)">Toggle Blue</a>
        <a id="@d.Key-s2" class="chart-action" onclick="toggleData(this)">Toggle Black</a>
        <a id="@d.Key-s3" class="chart-action" onclick="toggleData(this)">Toggle Red</a>
        <a id="@d.Key-s4" class="chart-action" onclick="toggleData(this)">Toggle Green</a>
        <a id="@d.Key-s5" class="chart-action" onclick="toggleData(this)">Toggle Gold</a>
        <a id="@d.Key-s6" class="chart-action" onclick="toggleData(this)">Toggle Colorless</a>
        <a id="@d.Key-s7" class="chart-action" onclick="toggleData(this)">Toggle Overall</a>
    </div>
}
@* 
<div>
    <canvas id="powerData"></canvas>
    <div>
        <a id="p0" class="chart-action" onclick="toggleData(this)">Toggle White</a>
        <a id="p1" class="chart-action" onclick="toggleData(this)">Toggle Blue</a>
        <a id="p2" class="chart-action" onclick="toggleData(this)">Toggle Black</a>
        <a id="p3" class="chart-action" onclick="toggleData(this)">Toggle Red</a>
        <a id="p4" class="chart-action" onclick="toggleData(this)">Toggle Green</a>
        <a id="p5" class="chart-action" onclick="toggleData(this)">Toggle Gold</a>
        <a id="p6" class="chart-action" onclick="toggleData(this)">Toggle Colorless</a>
        <a id="p7" class="chart-action" onclick="toggleData(this)">Toggle Overall</a>
    </div>
</div>

<br /><br /><br />

<div>
    <canvas id="toughnessData"></canvas>
    <div>
        <a id="t0" class="chart-action" onclick="toggleData(this)">Toggle White</a>
        <a id="t1" class="chart-action" onclick="toggleData(this)">Toggle Blue</a>
        <a id="t2" class="chart-action" onclick="toggleData(this)">Toggle Black</a>
        <a id="t3" class="chart-action" onclick="toggleData(this)">Toggle Red</a>
        <a id="t4" class="chart-action" onclick="toggleData(this)">Toggle Green</a>
        <a id="t5" class="chart-action" onclick="toggleData(this)">Toggle Gold</a>
        <a id="t6" class="chart-action" onclick="toggleData(this)">Toggle Colorless</a>
        <a id="t7" class="chart-action" onclick="toggleData(this)">Toggle Overall</a>
    </div>
</div>

<br /><br /><br />

<div>
    <canvas id="scatter"></canvas>
    <div>
        <a id="s0" class="chart-action" onclick="toggleData(this)">Toggle White</a>
        <a id="s1" class="chart-action" onclick="toggleData(this)">Toggle Blue</a>
        <a id="s2" class="chart-action" onclick="toggleData(this)">Toggle Black</a>
        <a id="s3" class="chart-action" onclick="toggleData(this)">Toggle Red</a>
        <a id="s4" class="chart-action" onclick="toggleData(this)">Toggle Green</a>
        <a id="s5" class="chart-action" onclick="toggleData(this)">Toggle Gold</a>
        <a id="s6" class="chart-action" onclick="toggleData(this)">Toggle Colorless</a>
        <a id="s7" class="chart-action" onclick="toggleData(this)">Toggle Overall</a>
    </div>
</div>
     *@
